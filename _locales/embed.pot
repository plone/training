# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-28 20:53-0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../embed.rst:2
# c1c32ae6b20e47a186e9fc7f01ee3ece
msgid "Using starzel.votable_behavior in ploneconf.site"
msgstr ""

#: ../embed.rst:6
# 499cd3396cbd429b8ea8b34937cbef84
msgid "We want to use the votable behavior, so that our reviewers can vote."
msgstr ""

#: ../embed.rst:7
# 7ded8a6ea7c14a13b70de2e3c9c1cb0f
msgid "To show how to use events, we are going to auto publish talks that have reached a certain rating."
msgstr ""

#: ../embed.rst:8
# 8b0cc33248cd4ba18dad8564fa774c41
msgid "We are not going to let everybody vote everything."
msgstr ""

#: ../embed.rst:10
# aeea7de1ea6449e7b608f7209f87cf4a
msgid "First, we must add our package as a dependency to ploneconf.site."
msgstr ""

#: ../embed.rst:14
# d84ab78f5bb746f286b70bf543315f31
msgid "We do this in two locations. The egg description :file:`setup.py` needs :samp:`starzel.votable_behavior` as a dependency. Else no source code will be available."
msgstr ""

#: ../embed.rst:17
# 0a94fb3e8b1d46eeb6c7cd5b5f958349
msgid "The persistent configuration needs to be installed when we install our site. This is configured in GenericSetup."
msgstr ""

#: ../embed.rst:19
# 338be21346c941e485edec5f4db47beb
msgid "We start with by editing :file:`setup.py`"
msgstr ""

#: ../embed.rst:37
# a447a353f83c4e1eaa14d3cba78f9dfd
msgid "Next up we modify :file:`profiles/default/metadata.xml`"
msgstr ""

#: ../embed.rst:52
#: ../embed.rst:76
# 4839c1688ffd4472a717ba9a4ecb3b87
# bf1dcb180cc144feb6fa26963bed924f
msgid "... only:: not presentation"
msgstr ""

#: ../embed.rst:54
# fa5233a8d3094871af3e82416fafd02b
msgid "What a weird name. profile- is a prefix you will always need nowadays. Then comes the egg name, and the part after the colon is the name of the profile. The name of the profile is defined in zcml. So far I've stumbled only over one package where the profile directory name was different to the GenericSetup Profile name."
msgstr ""

#: ../embed.rst:56
# c71efb70d50643dda1aba60186571bde
msgid "Now the package is there, but nothing is votable. That is because no content type declares to use this behavior. We can add this behavior via the control panel, export the settings and store it in our egg. Let's just add it by hand now."
msgstr ""

#: ../embed.rst:58
# 7b3edb0317c94870abf0a8f1efc887b9
msgid "We have to add the behavior to talks, we do this in :file:`profiles/default/types/talk.xml`"
msgstr ""

#: ../embed.rst:62
# 0b3a3894de47459f9f82c0b8f19b5b6e
msgid "Managing dependencies in metadata.xml is good practice. We can't rely on remembering what we'd have to do by hand. For example, do you remember that we had to add to select ``Dexterity-based Plone Default Types`` when creating a new Plone-site?"
msgstr ""

#: ../embed.rst:64
# 53ed465f6f704f6d83907f96fcea125f
msgid "We should instead also add ``<dependency>profile-plone.app.contenttypes:plone-content</dependency>`` like the `documentation for plone.app.contenttypes <https://docs.plone.org/external/plone.app.contenttypes/docs/README.html#installation-as-a-dependency-from-another-product>`_ recommends."
msgstr ""

#: ../embed.rst:78
# d8ab12ecf53b4e77af225bd76697e4de
msgid "Now we can reinstall our Plone site."
msgstr ""

#: ../embed.rst:80
# 61b147d6f5904568883f8845f7c7edb3
msgid "Everybody can vote now on talks. That is not what we wanted. Actually, we want reviewers only to vote on pending Talks. This means, depending on the workflow state, the permission has to change. Luckily, workflows can be configured to do just that. Talks already have their own workflow. So we won't interfere with other packages."
msgstr ""

#: ../embed.rst:83
# 2092fc72c21b45da8f2d022ae74a7caf
msgid "First, we have to tell the workflow that he will be managing more permissions. Next up, we have to configure for each state, which role has the two new permissions now."
msgstr ""

#: ../embed.rst:85
# 515c1edd22574249a2e907741d1ffded
msgid "That is a very verbose configuration, maybe you want to do it in the web interface and export the settings. On the other hand, it is easy to make a simple mistake in both ways. I will just present xml way here."
msgstr ""

#: ../embed.rst:87
# 8add345a6fa14b46b2738f324d5541e2
msgid "The config for the Workflow is in :file:`profiles/default/workfows/talks_workflow.xml`"
msgstr ""

#: ../embed.rst:145
# 4c63fee01c274e52b1dafb9db01516e6
msgid "We have to reinstall our product again."
msgstr ""

#: ../embed.rst:147
# 1812d3381cdf43ae9d14dfbdb5e58c24
msgid "But this time, this is not enough. Permissions get updated on workflow changes. As long as a workflow change didn't happen, the talks have the same permissions as ever."
msgstr ""

#: ../embed.rst:149
# 91b6b58ab6654d6890c080fdc8fe5ccb
msgid "Luckily, there is a button for that in the ZMI Workflow view :guilabel:`Update security settings`."
msgstr ""

#: ../embed.rst:151
# 061535749b1848c2850f08cd34b7a81f
msgid "After clicking on this, only managers and Reviewers can see the Voting functionality."
msgstr ""

#: ../embed.rst:153
# 184c56c29680468cb928c02334ae6e18
msgid "Lastly, we add our silly function to autoapprove talks."
msgstr ""

#: ../embed.rst:155
# 27a43ff4252a400686a3bf7dc8b078a9
msgid "You quickly end up writing many event handlers, so we put everything into a directory for eventhandlers."
msgstr ""

#: ../embed.rst:157
# a5d17b99ff3944bda4b71fe347dd176c
msgid "For the events we need a :file:`events` directory."
msgstr ""

#: ../embed.rst:159
# de21d58bccbc43a383f23f51eceb4384
msgid "Create the :file:`events` directory and add an empty :file:`events/__init__.py` file."
msgstr ""

#: ../embed.rst:161
# 68964965bbae4f34ae54469f133244ee
msgid "Next, register the events directory in :file:`configure.zcml`"
msgstr ""

#: ../embed.rst:168
# 4766861381f244199d5fc6d22f8e703e
msgid "then, we write the ZCML configuration for the events into :file:`events/configure.zcml`"
msgstr ""

#: ../embed.rst:187
# 3e0e983798f145258d182d4364bf147d
msgid "This looks like a MultiAdapter. We want to get notified, when an IVotable object gets modified. Our method will receive the votable object, and the event itself."
msgstr ""

#: ../embed.rst:189
# 82d4546711ff4a429a3954e20f65f9ed
msgid "And finally, our event handler in :file:`events/votable.py`"
msgstr ""

#: ../embed.rst:207
# f0b76f36ddb2484ea4eb27f8d2ce8283
msgid "We are using a lot of plone api here. Plone API makes the code a breeze. Also, there is nothing really interesting. We will only do something, if the workflow state is pending and the average vote is above 0.5. As you can see, the :samp:`transition` Method does not want the target state, but the transition to move the state to the target state."
msgstr ""

#: ../embed.rst:211
# 2e9bd72ac08b42f5992d7e552c02c756
msgid "There is nothing special going on."
msgstr ""

