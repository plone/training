# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-28 20:53-0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../eggs1.rst:2
# 5db78e7484ed4e5c917b9e2075d819b5
msgid "Creating addons to customize Plone"
msgstr ""

#: ../eggs1.rst:0
# ab189651da634e1ab3286d19aabce66c
msgid "Get the code!"
msgstr ""

#: ../eggs1.rst:6
# 3f5c64ea000745c7af47e33ce37312ef
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout-directory:"
msgstr ""

#: ../eggs1.rst:13
# e6c2018024f249e4b7a4baad3c7e6742
msgid "Using zopeskel to create an egg"
msgstr ""

#: ../eggs1.rst:15
# a1b10332f6af48b6b280f3fc116b9742
msgid "Our own code has to be organised as an egg. An egg is a zip file or a directory that follows certain conventions. We are going to use `ZopeSkel <https://pypi.python.org/pypi/ZopeSkel>`_ to create a skeleton project. We only need to fill the holes."
msgstr ""

#: ../eggs1.rst:19
# 234673c94077483cad6d1ff949a802a4
msgid "In the training we use ZopeSkel 2.21.2, a relatively old version. We do this because this version is shipped with Plone's Unified Installer. In our own projects we mostly use `mr.bob <http://mrbob.readthedocs.org/en/latest/>`_ to create eggs."
msgstr ""

#: ../eggs1.rst:21
# f93ff3a29345472997f41787cd891fe5
msgid "We move to the ``src`` directory and call a script called ``zopeskel`` from our projects bin-directory."
msgstr ""

#: ../eggs1.rst:29
# 2290700c34874e7e94ccf68d1db4558e
msgid "This returns a list of available templates we might use. We choose dexerity since it is pretty small but already has some of the right dependencies we need."
msgstr ""

#: ../eggs1.rst:35
# b8d5fb51e9f34eb78658e90501227f17
msgid "We answer some questions:"
msgstr ""

#: ../eggs1.rst:37
# 7ce9c82fda2a46c0becb1fd7d30bb498
msgid "Enter project name: ``ploneconf.site``"
msgstr ""

#: ../eggs1.rst:38
# 0ef7c47821e74fada1508c3835ee56d6
msgid "Expert Mode? (What question mode would you like? (easy/expert/all)?) ['easy']: ``easy``"
msgstr ""

#: ../eggs1.rst:39
# 55649e46347a4c2e9b4e1ec2a79586e4
msgid "Version (Version number for project) ['1.0']: ``1.0.0``"
msgstr ""

#: ../eggs1.rst:40
# 9ba735d47de84fc6b993b3feb328974a
msgid "Description (One-line description of the project) ['Example Dexterity Product']: ``PloneConf Site``"
msgstr ""

#: ../eggs1.rst:41
# 6692443ba5854d7fb2d96654578207a0
msgid "Grok-Based? (True/False: Use grok conventions to simplify coding?) [True]: ``False``"
msgstr ""

#: ../eggs1.rst:42
# 0bcdb10b44e349a9947eaa1bf1265a43
msgid "Use relations? (True/False: include support for relations?) [False]: ``True``"
msgstr ""

#: ../eggs1.rst:46
# ebc9a85ca4ea439c94276a8ca0c5f33b
msgid "If this is your first egg, this is a very special moment. We are going to create the egg with a script that generates a lot of necessary files. They all are necessary, but sometimes in a subtle way. It takes a while do understand their full meaning. Only last year I learnt and understood why I should have a ``manifest.in`` file. You can get along without one, but trust me, you get along better with a proper manifest file."
msgstr ""

#: ../eggs1.rst:49
# 2d36b24a150246d192483c412ea2a0c9
msgid "Inspecting the package"
msgstr ""

#: ../eggs1.rst:51
# be364382d1cd476998d37a920af34624
msgid "Let's have a look at some of it's files."
msgstr ""

#: ../eggs1.rst:54
# 1c54eaeaf73148dc9b53368c91ca89e5
msgid "bootstrap.py, buildout.cfg, plone.cfg"
msgstr ""

#: ../eggs1.rst:54
# 30e67394998a48c1922d5e75e46b8470
msgid "You can ignore these files for now. They are here to create a buildout only for this egg to make testing easier."
msgstr ""

#: ../eggs1.rst:57
# 8f31b8df1aa24f55bf1012e2f95874b0
msgid "docs, README.txt"
msgstr ""

#: ../eggs1.rst:57
# 54c2d1605fe947f5b70f0d5b6592b724
msgid "The documentation and changelog of your egg goes in there"
msgstr ""

#: ../eggs1.rst:60
# 734056d6954842aca2a2338429b09feb
msgid "setup.py"
msgstr ""

#: ../eggs1.rst:60
# b8a33c89fed34f8a99866ad57047953d
msgid "This file configures the package, it's name, dependencies and some metadata like the authors name. The dependencies listed here are automatically added by buildout."
msgstr ""

#: ../eggs1.rst:63
# e038d5d9d8d848f6b826da8685172efa
msgid "ploneconf/site/configure.zcml"
msgstr ""

#: ../eggs1.rst:63
# f232f9825d92487cac7a33fda2ca4621
msgid "The phone-book of the packages. By reading it you can find out which functionality is registered though the component architecture."
msgstr ""

#: ../eggs1.rst:66
# 8a83c04f2e024e41b27bb666c5c82e39
msgid "ploneconf/site/locales/"
msgstr ""

#: ../eggs1.rst:66
# e6942e7eff38456b989067fc81db0d67
msgid "This holds translation-files (see https://docs.plone.org/develop/plone/i18n/internationalisation.html). We won't use it during the training."
msgstr ""

#: ../eggs1.rst:69
# d5e4b17272bb4bd19a52cc086eb5f71f
msgid "ploneconf/site/resources/"
msgstr ""

#: ../eggs1.rst:69
# 8156086709a94a3288f9ac075e3a440e
msgid "A directory that holds static resources (images/css/js). They are accessible through URLs like ``++resource++ploneconf.site/myawesome.css``"
msgstr ""

#: ../eggs1.rst:72
# e61f4af425744eb79e149b1c73ddb3c8
msgid "ploneconf/site/profiles/default/"
msgstr ""

#: ../eggs1.rst:72
# 5cdebf37c01d47ada015c8c98afe08b3
msgid "The folder contains the GenericSetup-profile. During the training will put some xml-files there that hold configuration for the site."
msgstr ""

#: ../eggs1.rst:77
# 628a00607e1d40bcaefb43c4c28a9639
msgid "ploneconf/site/profiles/default/metadata.xml"
msgstr ""

#: ../eggs1.rst:75
# 8c73a4c7a5ef4e0b85cffd26ee243ee8
msgid "Version-number and dependencies that are auto-installed."
msgstr ""

#: ../eggs1.rst:77
# 32ce8c0fea3a423e927d195337f0fc66
msgid "We could replace ``<dependency>profile-plone.app.dexterity:default</dependency>`` with ``<dependency>profile-plone.app.contenttypes:plone-content</dependency>`` to depend the addon we picked when creating our site with this egg."
msgstr ""

#: ../eggs1.rst:80
# d31f80bab55343189f479139d3006e19
msgid "ploneconf/site/profiles/default/types.xml"
msgstr ""

#: ../eggs1.rst:80
# 151632a0d3224083b6e607d695faca7c
msgid "Registration of types"
msgstr ""

#: ../eggs1.rst:82
# 0beb7ce2833c415e97b37d5d6355a9ab
msgid "There are also some files that can be deleted because they use outdated approaches to testing: ``ploneconf/site/tests.py`` and ``ploneconf/site/INTEGRATION.txt``."
msgstr ""

#: ../eggs1.rst:86
# a8906f1573254d41bb95e49acf2abb35
msgid "Including the egg in Plone"
msgstr ""

#: ../eggs1.rst:88
# 50926762014b47a8b86cfa2dea88c5d1
msgid "Before we can use our new addon we have to tell Plone about it. Edit ``buildout.cfg`` and uncomment ``ploneconf.site`` in the `eggs` and `sources` sections:"
msgstr ""

#: ../eggs1.rst:106
# fd0554b171ff4be1bdf7c55c93b7c300
msgid "This tells Buildout to add the egg ``ploneconf.site``. Since it is also in the `sources`-section Buildout will not try to download it from pypi but will expect it in ``src/ploneconf.site``. *fs* allows you to add packages on the filesystem without a version control system, or with an unsupported one."
msgstr ""

#: ../eggs1.rst:108
# e5642068c47a44a398b89db4ac61b46e
msgid "Now run buildout to reconfigure Plone with the updated configuration:"
msgstr ""

#: ../eggs1.rst:114
# 7d6e8f4c3f7548ac86dd77582e59adae
msgid "After restarting Plone with ``./bin/instance fg`` the new addon `ploneconf.site` is available for install like PloneFormGen or Plone True Gallery."
msgstr ""

#: ../eggs1.rst:116
# 47172aeaf6e34685ac728df0f24ba623
msgid "We will not install it now since we did not add any of our own code or configuration yet. Instead we will first create a new content-type through the web. We will then export it and add it as code to the egg. This way the content-type will be available for everyone who installs our addon."
msgstr ""

