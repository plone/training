# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Philip Bauer, Patrick Gerken. Version 1.2.2
# This file is distributed under the same license as the Mastering Plone package.
# 
# Translators:
# Leonardo J. Caballero G. <leonardocaballero@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone Training\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-22 11:27-0430\n"
"PO-Revision-Date: 2014-06-22 18:34+0000\n"
"Last-Translator: Leonardo J. Caballero G. <leonardocaballero@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mastering-plone-training/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# e133023cf51b47a983d5b7ab5011c377
#: ../grok.rst:3
msgid "Grok"
msgstr "Grok"

# 2c18e6c0abb140c2beea0218d4477f71
#: ../grok.rst:5
msgid ""
"Grok is an alternative declaration language for declaring your components. "
"It is compatible with the Zope Component Architecture, it used just an "
"alternative syntax."
msgstr ""

# 2d96c08e89e848e1bf1408b57dd240df
#: ../grok.rst:7
msgid ""
"Instead of writing separate zcml files, you annotate your code and you "
"create content conforming to specific file names so that they are "
"automatically found. There has been discussions whether grok should be used "
"in the plone core. The plone community decided against it, because it "
"increases the technology stack without adding functionality."
msgstr ""

# 5b1243bf49734cfcbaadefe9ed274d67
#: ../grok.rst:10
msgid ""
"Some people are even against using it in Add Ons, because there would not be"
" just one way to declare components, but two. Then there is onle last "
"disadvantage, grok components cannot be overridden by z3c.jbot. I would not "
"be surprised if this could be fixed though."
msgstr ""

# 06276c091c974ac18333dcbf4dbe53ff
#: ../grok.rst:12
msgid ""
"After all these negative things let us tell you why we still like it: We "
"like to write as few lines of code and configuration as possible."
msgstr ""

# a91424632b8342d7915e5c4871e6b73f
#: ../grok.rst:14
msgid ""
"So, we will write our browser view as a grok view. From the component "
"architecture side, nothing changes. We still need to write a multi adapter. "
"All the details like which template to use or for which browser layer the "
"view shall be used is declared with a single line annotation or deduced from"
" file names."
msgstr ""

# 864030f9412b4e2380a39960a5e4debb
#: ../grok.rst:18
msgid "https://docs.plone.org/develop/addons/five-grok/index.html"
msgstr "https://docs.plone.org/develop/addons/five-grok/index.html"

# b6db22f5a067401ba03d14c727d776a9
#: ../grok.rst:20
msgid ""
"Grok is not part of plone. We have to add it as a dependency to our egg."
msgstr ""

# d9c84a4aba484073a773e8fb292d53ba
#: ../grok.rst:22
msgid ""
"Open setup.py, and add ``five.grok`` to the list off addons in "
"``install_requires``::"
msgstr ""

# 7ee79caf273647b5a11d0e81d0987c4e
#: ../grok.rst:31
msgid "You need to run buildout now."
msgstr ""

# d427bdd9b44a424f9e47820b84f551bd
#: ../grok.rst:33
msgid ""
"Grok nearly magicaly does find all its annotations. Since its not complete "
"magic, you have to tell grok where to look for grok code. This requires a "
"single line of zcml, that line ensures that your complete package is "
"`grokked`."
msgstr ""

# 9e6eda6ff8b347b2ace16efa4c9f3558
#: ../grok.rst:53
msgid "This new grok statement takes care of finding everything grok related."
msgstr ""

# a88b6aeb55ee498fbf2e08e8352a0f42
#: ../grok.rst:55
msgid "Now we can add a grok view in a new file ``views.py``:"
msgstr ""

# 237145d8775b4f47b2cf667d5bb0134c
#: ../grok.rst:69
msgid ""
"By convention the template must be in a subdirectory called "
"``views_templates`` and it must be named `talkview.pt`"
msgstr ""
