# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-28 20:53-0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../views_3.rst:2
# ffaea47add6943c788cc21c2b183ea23
msgid "Views III: A Talk list"
msgstr ""

#: ../views_3.rst:0
# 348be93ca86b4dc1a873a129ee99d2af
msgid "Get the code!"
msgstr ""

#: ../views_3.rst:6
# 3e0d116f343543f4ab87b4ec03412780
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout-directory:"
msgstr ""

#: ../views_3.rst:13
# 733628c4ea9745e2951c96e546609a43
msgid "Now we don't want to provide information about one specific item but on several items. What now? We can't look at several items at the same time as context."
msgstr ""

#: ../views_3.rst:17
# 2be4ba9a96f24dde9eca2941a9c93b68
msgid "Using portal_catalog"
msgstr ""

#: ../views_3.rst:19
# 0d3d160b261843229d26f248bec1ec3b
msgid "Let's say we want so show a list of all the talks that were submitted for our conference. We can just go to the folder and select a display-method that suits us. But none does because we want to show the target-audience in our listing."
msgstr ""

#: ../views_3.rst:21
# 2a20262969bb4817a6e3e2d5519f24fb
msgid "So we need to get all the talks. For this we use the python-class of the view to query the catalog for the talks."
msgstr ""

#: ../views_3.rst:23
# b7e20ef8c8124ffb9257a98144520d46
msgid "The catalog is like a search-engine for the content on our site. It holds information about all the objects as well as some of their attributes like title, decription, workflow_state, keywords that they were tagged with, author, content_type, it's path in the site etc. But it does not hold the content of \"heavy\" fields like images or files, richtext-fields and field that we just defined ourselves."
msgstr ""

#: ../views_3.rst:25
# 4060d1b46cbb41768b8edc85c78c6ef8
msgid "It is the fast way to get content that exists in the site and do something with it. From the results of the catalog we can get the objects themselves but often we don't need them, but only the properties that the results already have."
msgstr ""

#: ../views_3.rst:27
# ad5d5d9f3177443591a1843c90fb6c49
msgid "ZCML"
msgstr ""

#: ../views_3.rst:41
# ae3556917fec4e9b92f2d8b5a9e00c46
msgid "Python"
msgstr ""

#: ../views_3.rst:85
# f896eae4a110452e980f43d0e2df7422
msgid "We query the catalog for two things:"
msgstr ""

#: ../views_3.rst:87
# b59d49a657b241059c9948925ff5b4f8
msgid "``portal_type = \"talk\"``"
msgstr ""

#: ../views_3.rst:88
# 973a57cb39eb4bee82474398526c59b4
msgid "``path = \"/\".join(self.context.getPhysicalPath())``"
msgstr ""

#: ../views_3.rst:90
# 376e793a5ba542caaf2578defbe55a54
msgid "We get the path of the current context to query only for objects in the current path. Otherwise we'd get all talks in the whole site. If we moved some talks to a different part of the site (e.g. a sub-conference for universities with a special talk-list) we might not want so see them in our listing."
msgstr ""

#: ../views_3.rst:92
# 53f10cc9ced54e94839df7b29b1b8393
msgid "We iterate over the list of results that the catalog returns us."
msgstr ""

#: ../views_3.rst:94
# b7b83865dc1a4b0592be200a68d55b90
msgid "We create a dictionary that holds all the information we want to show in the template. This way we don't have to put any complex logic into the template."
msgstr ""

#: ../views_3.rst:97
# a0e3bdde076046d29c1b26b63bac305e
msgid "brains and objects"
msgstr ""

#: ../views_3.rst:99
# 0a26b639ad924523ad136cdfdb6d9227
msgid "Objects are normally not loaded into memory but lie dormant in the Database ZODB. Waking objects up can be slow, especially if you're waking up a lot of objects. Fortunately our talks are not especially heavy since they are"
msgstr ""

#: ../views_3.rst:101
# f6cc3c5a79c64b44a0dbe85b7e38aea6
msgid "dexterity-objects which are lighter than their archetypes-brothers"
msgstr ""

#: ../views_3.rst:102
# facd04f7c39d4492b56f9dbb89e7c397
msgid "relatively few since we don't have thousands of talks at our conference"
msgstr ""

#: ../views_3.rst:104
# 258660aae8cc482faac7c800bbdbffbb
msgid "We want to show the target-audience but that attributes of the talks is not in the catalog. This is why we need to get to the objects themselves."
msgstr ""

#: ../views_3.rst:106
# 0ec10c13df394655965b7e1b627a5dec
msgid "We could also add a new index to the catalog that will add 'audience' to the properties of the brains. We have to weight pros and cons:"
msgstr ""

#: ../views_3.rst:108
# afb9daa94f8e4000b234ad864653b3ad
msgid "talks are important and thus most likely always in memory"
msgstr ""

#: ../views_3.rst:109
# 3e9c2ffc6bcf4a45b18835af0d68213f
msgid "prevent bloating of catalog with indexes"
msgstr ""

#: ../views_3.rst:113
# 1efe7fa2975f4b3ab54f63e3590cd7ab
msgid "The code to add such an index would look like this::"
msgstr ""

#: ../views_3.rst:122
# 27d5136d1db947da8d94dd1d12d0a528
msgid "We'd have to register this factory function as a named adapter in the ``configure.zcml``. Assuming you've put the code above into a file named indexers.py"
msgstr ""

#: ../views_3.rst:128
# bd0049a1162944ceb28aad22cf97f3b4
msgid "We will add some indexers later on."
msgstr ""

#: ../views_3.rst:130
# 116a7b9a49a34d6aa4c9c3f5fd63d68d
msgid "Why use the catalog at all? It checks for permissions, and only returns the talks that the current user may see. They might be private or hidden to you since they are part of a top-secret conference for core-develeopers (there is no such thing!)."
msgstr ""

#: ../views_3.rst:132
# 3207095196704731ac7e2321c41922e5
msgid "Most objects in plone act like dictionaries, so I could do context.values() to get all it's contents."
msgstr ""

#: ../views_3.rst:134
# 3b1862bf0c1d4117abc116999ed30703
msgid "For historical reasons some attributes of brains and objects are written differently::"
msgstr ""

#: ../views_3.rst:147
# d403c4b42e38403d82354a6699600e5d
msgid "Who can guess what ``brain.title`` will return since the brain has no such attribute?"
msgstr ""

#: ../views_3.rst:153
# 3406a3d5f3de40668a32db6bf2c3e221
msgid "Answer: Acquisition will get the attribute from the nearest parent. ``brain.__parent__`` is ``<CatalogTool at /Plone/portal_catalog>``. The attribute ``title`` of the ``portal_catalog`` is 'Indexes all content in the site'."
msgstr ""

#: ../views_3.rst:155
# e66895f6c96349e692e267f5eb3cb824
msgid "Acquisition can be harmfull. Brains have no attribute 'getLayout' ``brain.getLayout()``::"
msgstr ""

#: ../views_3.rst:166
# 1a0fad3a0e064951b48550532debfd1b
msgid "The same is true for methods::"
msgstr ""

#: ../views_3.rst:176
# 7ee3d1c282bb4f128685a2974c0e2f31
msgid "Querying the catalog"
msgstr ""

#: ../views_3.rst:178
# 0ee16be258274008b86ff233e85edfa7
msgid "The are many `catalog indexes <https://docs.plone.org/develop/plone/searching_and_indexing/indexing.html>`_ to query. Here are some examples::"
msgstr ""

#: ../views_3.rst:186
# 688eac13f69d487287b25257899a23fa
msgid "Calling the catalog without parameters return the whole site::"
msgstr ""

#: ../views_3.rst:193
# d898900a012e42b19f08b4953abd57d1
msgid "https://docs.plone.org/develop/plone/searching_and_indexing/query.html"
msgstr ""

#: ../views_3.rst:197
# 54c763ce1e494266afa3240b0c04a283
msgid "The template for the listing"
msgstr ""

#: ../views_3.rst:199
# 7798fd4987c04794a67f7f82b1fd023f
msgid "Next the template in which we use the results of our method 'talks'."
msgstr ""

#: ../views_3.rst:201
# fb34a6afd09c46c3879771a144efd9bc
msgid "We try to keep logic mostly in python. This is for two reasons:"
msgstr ""

#: ../views_3.rst:204
# 66ca10790e834ea6942431025a9b98c2
msgid "Readability:"
msgstr ""

#: ../views_3.rst:204
# 151ea6b0df124cdb963e4a981c3e3af1
msgid "It's much simpler to read python that complex tal-structures"
msgstr ""

#: ../views_3.rst:207
# 3fe0e334865b4d44afcab91bdb1b08c2
msgid "Speed:"
msgstr ""

#: ../views_3.rst:207
# 01c91f8790aa4b4ca1cceff588c72d9b
msgid "Python-code is faster than code executed in templates. It's also easy to add caching to methods."
msgstr ""

#: ../views_3.rst:209
# 2c2b7ccefa5549988afefac3533e7534
msgid "The MVC-Schema does not directly apply to Plone but look at it like this:"
msgstr ""

#: ../views_3.rst:212
# bb7bfd7888d5426bbebb0815a7544aa3
msgid "Model:"
msgstr ""

#: ../views_3.rst:212
# 71cd422b325040e5827932137502cd2a
msgid "the object"
msgstr ""

#: ../views_3.rst:215
# e6ab53987476491f9cf5c748d9067651
msgid "View:"
msgstr ""

#: ../views_3.rst:215
# 018127b4359d41138e073ed7ebe3bddc
msgid "the template"
msgstr ""

#: ../views_3.rst:218
# 89f1d2ba706c4ba79fbd6c7ab8a101e7
msgid "Controller:"
msgstr ""

#: ../views_3.rst:218
# 627a4dec25184b14924be5e72eb678a2
msgid "the view"
msgstr ""

#: ../views_3.rst:220
# 84248d38a8544211a4a2282d1b690003
msgid "The view and the controller are very much mixed in Plone."
msgstr ""

#: ../views_3.rst:222
# eedde9cad05d4eacbc60b975ba33f9ba
msgid "When you look at some of the older code of Plone you'll see that the policy of keeping login inside python and representation in templates was not always enforced. You should nevertheless do it. You'll end up with more than enough logic in the templates anyway. You'll see now."
msgstr ""

#: ../views_3.rst:224
# 3fd3ea4f29db414495ceab9cad2b3217
msgid "Let's add this simple table to our template ``templates/talklistview.pt``:"
msgstr ""

#: ../views_3.rst:258
# c32083f8760d45b4ae76f5cebf79f2d3
msgid "After we transform it we have a listing:"
msgstr ""

#: ../views_3.rst:302
# 272295311adf4cddad1d0b6a702043d0
msgid "I'll explain some of the things in the TAL:"
msgstr ""

#: ../views_3.rst:305
# fcb8c936a4494d968e543ebe5ec98825
msgid "``tal:repeat=\"talk view/talks\"``"
msgstr ""

#: ../views_3.rst:305
# 0c3a0f80f1f04cfdb34030d1572cc989
msgid "we iterate over the list of dictionaries returned by our view. ``view/talks`` calles the method ``talks`` of our view and each ``talk`` is in turn a dictionary. Since TAL's path-expressions for the lookup of values in dictionaries is the same as the attributes of objects we can write ``talk/somekey`` as we could ``view/somemethod``. Handy but sometimes irritating since from looking at the page-template alone we have often no way of knowing if something is an attribute, a method or the value of a dict."
msgstr ""

#: ../views_3.rst:308
# bd54ce22cd5d418b8915ef5d75265c6b
msgid "``tal:content=\"talk/speaker\"``"
msgstr ""

#: ../views_3.rst:308
# 21b1bce240d843668ab747d0c6d450e4
msgid "'speaker' is a key in the dict 'talk'. We could also write ``tal:content=\"python:talk['speaker']\"``"
msgstr ""

#: ../views_3.rst:312
# 4efaa00610f9460f84593df578ced641
msgid "``tal:condition=\"not:view/talks\"``"
msgstr ""

#: ../views_3.rst:311
# f9d6525d4e434ee8b82777002c303f46
msgid "this is a fallback for when no talks are returned by out method talks. It then return an empty list (remember ``results = []``?)"
msgstr ""

#: ../views_3.rst:315
# 6d4340a7a4664cdbb64ba937190a86bb
msgid "Setting a custom view as default-view on an object"
msgstr ""

#: ../views_3.rst:317
# bc29996f061f47a8a0a37d8c1731a082
msgid "We don't want to always have to append /@@talklistview to out folder to get the view. There is a very easy way to set the view to the folder using the ZMI."
msgstr ""

#: ../views_3.rst:319
# 3ad75bbcee7d44058cb9f2c6eddde1f9
msgid "If we append ``/manage_propertiesForm`` we can set the property \"layout\" to ``talklistview``."
msgstr ""

#: ../views_3.rst:321
# a326156c690a460588449115ea9a26d6
msgid "To make views configurable so that editors can choose them we have to register the view for the content-type at hand in it's FTI. To enable if for all folders we add a new file ``profiles/default/types/Folder.xml``"
msgstr ""

#: ../views_3.rst:334
# 5eec6bc36acb4e2180ac2bff13086917
msgid "After reapplying the typeinfo-profile of out addon (or simply reinstalling it) the content-type \"Folder\" is extended with our additional view-method and appears in the display-dropdown."
msgstr ""

#: ../views_3.rst:336
# 4344dd3b658a4b3ba61abdc3c3f43682
msgid "The ``purge=\"False\"`` append out view to the already existing ones instead of replacing them."
msgstr ""

#: ../views_3.rst:340
# 0614e173d3a1424eb40ee025aa01ea04
msgid "Adding some javascript (collective.js.datatables)"
msgstr ""

#: ../views_3.rst:342
# 9478f55b777a40e5b8f355650de65303
msgid "Here we use one of many nice feature build into Plone. The class=\"listing\" gives the table a nice style and makes the table sortable with some javascript."
msgstr ""

#: ../views_3.rst:344
# 4cbc775b194347aa96e7962b8c1cdf4d
msgid "But we could improve that table further by using a nice javascript-library called \"datatables\". It might even become part of the Plone-core at some point."
msgstr ""

#: ../views_3.rst:346
# 1c7016e32cb14fb8a68d14aa3f9907f0
msgid "Like for many js-libraries there is already a package that doe the plone-integration for us: ``collective.js.datatables``. Like all python-packages you can find it on pypi: http://pypi.python.org/pypi/collective.js.datatables"
msgstr ""

#: ../views_3.rst:348
# af9a05aaf1864f959aa235b074acaf30
msgid "We already added the addon to our buildout and just have to activate it in our template."
msgstr ""

#: ../views_3.rst:416
# 25639e71332c45bdb09f4c0ff03c0c57
msgid "We don't need the css-class ``listing`` anymore since it might clash with datatables (it does not but still...)."
msgstr ""

#: ../views_3.rst:418
# 937e0fb357684caa9218596ad3b68ad7
msgid "The documentation of datatables is beyond our training."
msgstr ""

#: ../views_3.rst:420
# a570f666ca1f427ba7f3b65d03610e50
msgid "We use METAL again but this time to fill a different slot. The \"javascript_head_slot\" is part of the html's ``<head>``-area in Plone and can be extended this way. We could also just put the code inline but having nicely ordered html is a good practice."
msgstr ""

#: ../views_3.rst:422
# cb22afd64a5f428298da6101fe496800
msgid "Let's test it: http://localhost:8080/Plone/talklistview"
msgstr ""

#: ../views_3.rst:426
# c4cd3954f24a49bea3fc7f67ea59b53c
msgid "Summary"
msgstr ""

#: ../views_3.rst:428
# d1b39047743642ca92c420eb32fa2cd6
msgid "We created a nice listing, that can be called at any place in the website."
msgstr ""

