# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Philip Bauer, Patrick Gerken. Version 1.2.2
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-12 23:28-0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../instructions.rst:2
# 0edf76176c5c4b838e5abb5641e2ed49
msgid "Installing Plone for the Training"
msgstr ""

#: ../instructions.rst:6
# 542ca8ca8c204ff38851f17b785d952f
msgid "To not waste too much time with installing and debugging the differences between systems we use a virtual machine (Ubuntu 14.04) to run Plone during the training. We rely on Vagrant and VirtualBox to give the same development-environment to everyone."
msgstr ""

#: ../instructions.rst:8
# 5c58bd93d5df4f2e86d55a34680d2b69
msgid "`Vagrant <http://www.vagrantup.com>`_ is a tool for building complete development environments. We use it together with Oracle’s `VirtualBox <https://www.virtualbox.org>`_ to create and manage a virtual environment."
msgstr ""

#: ../instructions.rst:10
# 88f56c3ff6d04269a0eba42d58d50f43
msgid "Keep in mind that you need a fast internet-connection during the process since you'll have to download a complete virtual machine (ubuntu) and several packages and updates."
msgstr ""

#: ../instructions.rst:14
# 61824d71740f401f9f2305a58923d985
msgid "We recommend using a virtual machine for the training if you are not used to running Plone on your laptop."
msgstr ""

#: ../instructions.rst:16
# 083220f9a88041cbb12e6fe8d4a805b4
msgid "You can also work on your own machine with your own Python if you want to but **please please please** make sure that you have a system that will work since we don't want you to lose valuable time."
msgstr ""

#: ../instructions.rst:18
# 00766edff44f49bc8d5b2ec4c99db84f
msgid "If you want to use your own system use the Buildout at https://github.com/starzel/training_without_vagrant.git (since the one we set up with puppet has several directories set to folders not shared with the host)."
msgstr ""

#: ../instructions.rst:20
# ca839d7580a94cbe89cc1321bd77d2bd
msgid "Set up Plone for the training like this if you don't want to use a VM:"
msgstr ""

#: ../instructions.rst:33
# 1a4838ebc98b4e9ab6edb65d4e16972a
msgid "Install VirtualBox"
msgstr ""

#: ../instructions.rst:35
# 76ed7eb0861f4b04a1a487d05a31890e
msgid "Vagrant uses Oracle’s VirtualBox to create virtual environments. Here is a link directly to the download page: https://www.virtualbox.org/wiki/Downloads. We use VirtualBox  4.3.x."
msgstr ""

#: ../instructions.rst:39
# 5aa89c8ee78342bcb97f27fce65e462c
msgid "Install and configure Vagrant"
msgstr ""

#: ../instructions.rst:41
# 04402c8e32d8442fbec8c1fc36489f3a
msgid "Get the latest version from http://www.vagrantup.com/downloads for your operating system and install it."
msgstr ""

#: ../instructions.rst:45
# 01b4be5b2b21415ea5589e279909f1db
msgid "In Windows there is a bug in the recent version of Vagrant. Here are the instruction how to work around the warning ``Vagrant could not detect VirtualBox! Make sure VirtualBox is properly installed``."
msgstr ""

#: ../instructions.rst:47
# 3d096eddda7a432bb451d1104aa57ebc
msgid "Now your system has a command ``vagrant`` that you can run in the terminal."
msgstr ""

#: ../instructions.rst:49
# 4031a0ab8c164a97afb5aa2648a6bb4a
msgid "First create a directory where you want to do the training in."
msgstr ""

#: ../instructions.rst:56
# 103d6821ed534c3fb6c8be1010574342
msgid "Setup Vagrant to automatically install the current guest-additions. You can choose to skip this step if you encounter any problems with it."
msgstr ""

#: ../instructions.rst:63
# 3c3c96ce1dc04a7c88c34b3310be4934
msgid "Now either get the attachmed zip-file (if you read this as a mail) or download it from  :download:`http://starzel.github.io/training/plone_training_config.zip <../plone_training_config.zip>`."
msgstr ""

#: ../instructions.rst:63
# ed4d0c643c014080930967d498553a88
msgid "and copy its contents into your training directory. It should now hold the file \"Vagrantfile\" and the directory ``manifests``."
msgstr ""

#: ../instructions.rst:65
# bea6dd60a03241eca945d519ad1a8b62
msgid "Now start setting up the VM that is configured in \"Vagrantfile\""
msgstr ""

#: ../instructions.rst:71
# 325543806c534661b13109d55107ce0f
msgid "This takes a **veeeeery loooong time** since it:"
msgstr ""

#: ../instructions.rst:73
# b3ccdad422d1409eb244d248481b15ea
msgid "downloads a virtual machine (Official Ubuntu Server 14.04 LTS, also called \"Trusty Tahr\")"
msgstr ""

#: ../instructions.rst:74
# 92d6ced883284179909b6eb150b204fe
msgid "sets up the VM"
msgstr ""

#: ../instructions.rst:75
# c8e4eafdbeed4e33a467a839b899895f
msgid "updates the VM"
msgstr ""

#: ../instructions.rst:76
# aff4fbacfa7a406cb44a9477399db641
msgid "installs various packages needed for Plone development"
msgstr ""

#: ../instructions.rst:77
# 858addeb847a46f58f3d48b3aa60bb86
msgid "downloads and unpack the unified installer for Plone"
msgstr ""

#: ../instructions.rst:78
# b6ba550d28044ddbb9846c93d5dd519f
msgid "runs the unified installer for Plone."
msgstr ""

#: ../instructions.rst:79
# 17d1425aa1f8424aacae5974e8aa6f57
msgid "copy the eggs to a location we use in the training"
msgstr ""

#: ../instructions.rst:80
# 3778b6ca2ee848bcb456f7036a7aa7c0
msgid "clones the training-buildout into /vagrant/buildout"
msgstr ""

#: ../instructions.rst:81
# 112704a96d0e48d59c0b7fe594714c95
msgid "builds Plone using the eggs from the buildout-cache"
msgstr ""

#: ../instructions.rst:85
# d37cd057a412449a850ca08ad17118df
msgid "Sometimes this stops with the message *Skipping because of failed dependencies*."
msgstr ""

#: ../instructions.rst:91
# 6c8f7aa4427a4941ae18fd15c0db4a62
msgid "If this happens or you have the feeling that something has gone wrong and the installation has not finished correctly for some reason you need to run try   the following command to repeat the process. This will only repeat steps that have not finished correctly."
msgstr ""

#: ../instructions.rst:97
# 84bc2b1530454ffc8f1b80e96e9ca629
msgid "You can do this multiple times to fix problems, e.g. if your network-connection was down and steps could not finish because of this."
msgstr ""

#: ../instructions.rst:99
# 4dbc5737120247c7af2d0e3cd6830530
msgid "Once Vagrant finishes the provisioning-process, you can login to the now running virtual machine."
msgstr ""

#: ../instructions.rst:107
# 0f9235fcd19a4030bae7e0571084f5a0
msgid "If you have to use Windows you'll have to login to with `putty <http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html/download.html>`_. Connect to vagrant@127.0.01 at port 2222. User _and_ password are `vagrant`."
msgstr ""

#: ../instructions.rst:109
# d15cbdf395ed4358a7b2af68f0837557
msgid "You are now logged in as the user vagrant in ``/home/vagrant``. We'll do all steps of the training as this user."
msgstr ""

#: ../instructions.rst:111
# 38e7abca7e024db28b6db4afa8e3bf09
msgid "We pre-installed a fresh Plone for you in the folder ``/home/vagrant/Plone/zinstance`` You can run it now and access it from the browser. We will **not** use this Plone-instance in the training, so you can play around with it as much as you want."
msgstr ""

#: ../instructions.rst:113
# 3d7c5d54101e4569a0cae29320e54230
msgid "Instead we use our own Plone-instance during the training. It is in ``/vagrant/buildout/``. Start it in foreground with ``./bin/instance fg``."
msgstr ""

#: ../instructions.rst:126
# b885f17395ae40979fc4acd1025d4958
msgid "Now the Zope-instance we're using is running. You can stop the running instance anytime using ``ctrl + c``."
msgstr ""

#: ../instructions.rst:128
# 38e267c57ac04b1f947d7443c77eabd4
msgid "You can now point your local browser at http://localhost:8080 and see the Plone that is running in vagrant. This works because Virtualbox forwards the port 8080 from the guest-system (the vagrant-Ubuntu) to the host-system (your normal operating-system). Now create a new Plone-Site by clicking \"Create a new Plone-Site\". The username and the password are both \"admin\" (Never do this on a real site!)."
msgstr ""

#: ../instructions.rst:130
# 8a203cb95bfd484bb75435fd590efc8c
msgid "The Buildout for this Plone is in a shared folder, this means we run it in the vagrant-box from ``/vagrant/buildout`` but we can also access it in out own operating-system and use our favorite editor. You will find the directory ``buildout`` in the directory ``training`` that you created in the very beginning next to ``Vagrantfile`` and ``manifests``."
msgstr ""

#: ../instructions.rst:134
# 013a804b589c4521a0719848d44be8b8
msgid "The database and the python-packages are **not accessible** in you own system since large files and you canot use symlinks in shared folders. The database lies in ``/home/vagrant/var``, the python-packages are in ``/home/vagrant/omelette``."
msgstr ""

#: ../instructions.rst:136
# 72869be63d5b43d2926fbad71d32a640
msgid "If you have any problems or questions please mail us at team@starzel.de"
msgstr ""

#: ../instructions.rst:140
# 71e7bba1515f4307940307f0bb70a383
msgid "What Vagrant does"
msgstr ""

#: ../instructions.rst:144
# 7446268f48a84cc18549e900514affc4
msgid "These steps are automatically done by vagrant and puppet. They are only explained here if you want to know what goes on below the hood."
msgstr ""

#: ../instructions.rst:146
# 6f7139763d6048c0b1a3d1a5c4762995
msgid "Puppet does the first installation, Puppet is a tool to automatically manage servers (real and virtual). We won't get into Puppet since it is not that widely used. This is what we basically do if we did it by hand:"
msgstr ""

#: ../instructions.rst:148
# 1dce804b21c3411883c83226095a8eab
msgid "First we update the ubuntu and install some packages."
msgstr ""

#: ../instructions.rst:170
# d5361df7d5b142fb8d8ec54a403be058
msgid "Then we create a virtual python environement using virtualenv. This is alway a good practice since that way we get a clean copy of our system-python, we can't break it by installing eggs that might collide with other eggs::"
msgstr ""

#: ../instructions.rst:174
# 05b846022c9940a5bdeaaacc035904b8
msgid "Then we download, unpack and install the unified installer of Plone."
msgstr ""

#: ../instructions.rst:186
# 9f319e20df2c442a91a01f0a5108629c
msgid "The unified installer is an amazing tool that compiles it's own python, brings with it all the python-eggs we need and puts them in a buildout-cache. It then creates a Buildout and makes Plone ready to run."
msgstr ""

#: ../instructions.rst:188
# a6cf1f4440ea40558bc26689fe870a5b
msgid "We will not actually use this Plone during the training. If you want to use it for your own experiments, you can find it in ``/home/vagrant/Plone/zinstance`` on the virtual machine."
msgstr ""

#: ../instructions.rst:190
# 47b4a33fa3074df3aba47fd9256f014e
msgid "Instead vagrant now creates our own little Buildout and only uses the eggs that the unified installer created. First we copy the buildout-cache that holds all the python-packages that Plone consists of."
msgstr ""

#: ../instructions.rst:196
# be40399bbf1943f8973ecf979b6a054c
msgid "Then we checkout our tutorial buildout from http://github.com/starzel/training_buildout and build it."
msgstr ""

#: ../instructions.rst:206
# 0d1e9aa084c244be989e18bd3ae8c8cb
msgid "At this point vagrant has finished it's job."
msgstr ""

#: ../instructions.rst:208
# 962ad005003d4e1091e50a940f644372
msgid "You can now connect to the machine and start plone."
msgstr ""

#: ../instructions.rst:216
# a054c29a878f4652ad232a81d8d3977e
msgid "Now we have fresh Buildout based Zope site, ready to get a Plone site. Go to http://localhost:8080 and create a Plone site, only activate the  :guilabel:`Dexterity-based Plone Default Types` plugin."
msgstr ""

#: ../instructions.rst:218
# bd4a26980475480e8ce5f8f83ece7753
msgid "You might wonder, why we use the unified installer. We use the unified installer to set up a cache of packages to download in a much shorter time. Without it, your first Buildout on a fresh computer would take more than half an hour on a good internet connection."
msgstr ""

